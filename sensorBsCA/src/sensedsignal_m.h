//
// Generated file, do not edit! Created by opp_msgc 4.4 from sensedsignal.msg.
//

#ifndef _SENSEDSIGNAL_M_H_
#define _SENSEDSIGNAL_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0404
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>sensedsignal.msg</tt> by opp_msgc.
 * <pre>
 * message SensorMessage    
 * {
 *     string sensor_uuID;
 *     int sensor_index;   
 *     int sensor_xPos;
 *     int sensor_yPos;
 *     string bs_uuID;
 *     int bs_index;
 *     
 *     string action; 
 *     double sensor_signal;
 *     double send_time;
 * }
 * </pre>
 */
class SensorMessage : public ::cMessage
{
  protected:
    opp_string sensor_uuID_var;
    int sensor_index_var;
    int sensor_xPos_var;
    int sensor_yPos_var;
    opp_string bs_uuID_var;
    int bs_index_var;
    opp_string action_var;
    double sensor_signal_var;
    double send_time_var;

  private:
    void copy(const SensorMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SensorMessage&);

  public:
    SensorMessage(const char *name=NULL, int kind=0);
    SensorMessage(const SensorMessage& other);
    virtual ~SensorMessage();
    SensorMessage& operator=(const SensorMessage& other);
    virtual SensorMessage *dup() const {return new SensorMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getSensor_uuID() const;
    virtual void setSensor_uuID(const char * sensor_uuID);
    virtual int getSensor_index() const;
    virtual void setSensor_index(int sensor_index);
    virtual int getSensor_xPos() const;
    virtual void setSensor_xPos(int sensor_xPos);
    virtual int getSensor_yPos() const;
    virtual void setSensor_yPos(int sensor_yPos);
    virtual const char * getBs_uuID() const;
    virtual void setBs_uuID(const char * bs_uuID);
    virtual int getBs_index() const;
    virtual void setBs_index(int bs_index);
    virtual const char * getAction() const;
    virtual void setAction(const char * action);
    virtual double getSensor_signal() const;
    virtual void setSensor_signal(double sensor_signal);
    virtual double getSend_time() const;
    virtual void setSend_time(double send_time);
};

inline void doPacking(cCommBuffer *b, SensorMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SensorMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>sensedsignal.msg</tt> by opp_msgc.
 * <pre>
 * message generalMessage
 * {
 *     
 *     string bs_uuID;
 *     int bs_x;
 *     int bs_y;
 *     int src_index;
 *     double signal;
 *     string info;
 *     double send_time;
 *     
 *     
 *     string data_sig;
 *     
 *     
 *     string sig_srcid;
 *     string sig_srccomkey;  
 *     string sig_CAid;
 *     string sig_CAsig;
 *     int sig_srcIndex;
 *     int sig_type;
 *     
 *     
 *     string enc_srcid;
 *     string enc_srccomkey;   
 *     string enc_CAid;
 *     string enc_CAsig;
 * }
 * </pre>
 */
class generalMessage : public ::cMessage
{
  protected:
    opp_string bs_uuID_var;
    int bs_x_var;
    int bs_y_var;
    int src_index_var;
    double signal_var;
    opp_string info_var;
    double send_time_var;
    opp_string data_sig_var;
    opp_string sig_srcid_var;
    opp_string sig_srccomkey_var;
    opp_string sig_CAid_var;
    opp_string sig_CAsig_var;
    int sig_srcIndex_var;
    int sig_type_var;
    opp_string enc_srcid_var;
    opp_string enc_srccomkey_var;
    opp_string enc_CAid_var;
    opp_string enc_CAsig_var;

  private:
    void copy(const generalMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const generalMessage&);

  public:
    generalMessage(const char *name=NULL, int kind=0);
    generalMessage(const generalMessage& other);
    virtual ~generalMessage();
    generalMessage& operator=(const generalMessage& other);
    virtual generalMessage *dup() const {return new generalMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getBs_uuID() const;
    virtual void setBs_uuID(const char * bs_uuID);
    virtual int getBs_x() const;
    virtual void setBs_x(int bs_x);
    virtual int getBs_y() const;
    virtual void setBs_y(int bs_y);
    virtual int getSrc_index() const;
    virtual void setSrc_index(int src_index);
    virtual double getSignal() const;
    virtual void setSignal(double signal);
    virtual const char * getInfo() const;
    virtual void setInfo(const char * info);
    virtual double getSend_time() const;
    virtual void setSend_time(double send_time);
    virtual const char * getData_sig() const;
    virtual void setData_sig(const char * data_sig);
    virtual const char * getSig_srcid() const;
    virtual void setSig_srcid(const char * sig_srcid);
    virtual const char * getSig_srccomkey() const;
    virtual void setSig_srccomkey(const char * sig_srccomkey);
    virtual const char * getSig_CAid() const;
    virtual void setSig_CAid(const char * sig_CAid);
    virtual const char * getSig_CAsig() const;
    virtual void setSig_CAsig(const char * sig_CAsig);
    virtual int getSig_srcIndex() const;
    virtual void setSig_srcIndex(int sig_srcIndex);
    virtual int getSig_type() const;
    virtual void setSig_type(int sig_type);
    virtual const char * getEnc_srcid() const;
    virtual void setEnc_srcid(const char * enc_srcid);
    virtual const char * getEnc_srccomkey() const;
    virtual void setEnc_srccomkey(const char * enc_srccomkey);
    virtual const char * getEnc_CAid() const;
    virtual void setEnc_CAid(const char * enc_CAid);
    virtual const char * getEnc_CAsig() const;
    virtual void setEnc_CAsig(const char * enc_CAsig);
};

inline void doPacking(cCommBuffer *b, generalMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, generalMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>sensedsignal.msg</tt> by opp_msgc.
 * <pre>
 * message certiMessage
 * {
 *     
 *     string sig_srcid;
 *     string sig_srccomkey;  
 *     string sig_CAid;
 *     string sig_CAsig;
 *     
 *     int src_index;  
 *     int sig_srcIndex; 
 *     int sig_type; 
 * }
 * </pre>
 */
class certiMessage : public ::cMessage
{
  protected:
    opp_string sig_srcid_var;
    opp_string sig_srccomkey_var;
    opp_string sig_CAid_var;
    opp_string sig_CAsig_var;
    int src_index_var;
    int sig_srcIndex_var;
    int sig_type_var;

  private:
    void copy(const certiMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const certiMessage&);

  public:
    certiMessage(const char *name=NULL, int kind=0);
    certiMessage(const certiMessage& other);
    virtual ~certiMessage();
    certiMessage& operator=(const certiMessage& other);
    virtual certiMessage *dup() const {return new certiMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getSig_srcid() const;
    virtual void setSig_srcid(const char * sig_srcid);
    virtual const char * getSig_srccomkey() const;
    virtual void setSig_srccomkey(const char * sig_srccomkey);
    virtual const char * getSig_CAid() const;
    virtual void setSig_CAid(const char * sig_CAid);
    virtual const char * getSig_CAsig() const;
    virtual void setSig_CAsig(const char * sig_CAsig);
    virtual int getSrc_index() const;
    virtual void setSrc_index(int src_index);
    virtual int getSig_srcIndex() const;
    virtual void setSig_srcIndex(int sig_srcIndex);
    virtual int getSig_type() const;
    virtual void setSig_type(int sig_type);
};

inline void doPacking(cCommBuffer *b, certiMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, certiMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>sensedsignal.msg</tt> by opp_msgc.
 * <pre>
 * message askRenewMessage
 * {
 *     int bs_src_index;  
 *     int bs_search_index;  
 *     int CA_1_index;  
 *     int CA_2_index;   
 * }
 * </pre>
 */
class askRenewMessage : public ::cMessage
{
  protected:
    int bs_src_index_var;
    int bs_search_index_var;
    int CA_1_index_var;
    int CA_2_index_var;

  private:
    void copy(const askRenewMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const askRenewMessage&);

  public:
    askRenewMessage(const char *name=NULL, int kind=0);
    askRenewMessage(const askRenewMessage& other);
    virtual ~askRenewMessage();
    askRenewMessage& operator=(const askRenewMessage& other);
    virtual askRenewMessage *dup() const {return new askRenewMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getBs_src_index() const;
    virtual void setBs_src_index(int bs_src_index);
    virtual int getBs_search_index() const;
    virtual void setBs_search_index(int bs_search_index);
    virtual int getCA_1_index() const;
    virtual void setCA_1_index(int CA_1_index);
    virtual int getCA_2_index() const;
    virtual void setCA_2_index(int CA_2_index);
};

inline void doPacking(cCommBuffer *b, askRenewMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, askRenewMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>sensedsignal.msg</tt> by opp_msgc.
 * <pre>
 * message replyRenewMessage
 * {
 *     int bs_src_index;  
 *     int bs_search_index;
 *     bool trust;
 *     int CA_1_index;
 *     int CA_2_index; 
 * }
 * </pre>
 */
class replyRenewMessage : public ::cMessage
{
  protected:
    int bs_src_index_var;
    int bs_search_index_var;
    bool trust_var;
    int CA_1_index_var;
    int CA_2_index_var;

  private:
    void copy(const replyRenewMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const replyRenewMessage&);

  public:
    replyRenewMessage(const char *name=NULL, int kind=0);
    replyRenewMessage(const replyRenewMessage& other);
    virtual ~replyRenewMessage();
    replyRenewMessage& operator=(const replyRenewMessage& other);
    virtual replyRenewMessage *dup() const {return new replyRenewMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getBs_src_index() const;
    virtual void setBs_src_index(int bs_src_index);
    virtual int getBs_search_index() const;
    virtual void setBs_search_index(int bs_search_index);
    virtual bool getTrust() const;
    virtual void setTrust(bool trust);
    virtual int getCA_1_index() const;
    virtual void setCA_1_index(int CA_1_index);
    virtual int getCA_2_index() const;
    virtual void setCA_2_index(int CA_2_index);
};

inline void doPacking(cCommBuffer *b, replyRenewMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, replyRenewMessage& obj) {obj.parsimUnpack(b);}


#endif // _SENSEDSIGNAL_M_H_
